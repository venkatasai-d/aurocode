{"ast":null,"code":"var _jsxFileName = \"F:\\\\Kode\\\\Projects\\\\CGP_InterviewBot\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport { askLlama, storeInterview } from \"./api\"; // Import the API methods\nimport \"./App.css\"; // Import CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [name, setName] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(\"\");\n  const [currentAnswer, setCurrentAnswer] = useState(\"\");\n  const {\n    transcript,\n    resetTranscript\n  } = useSpeechRecognition();\n\n  // Function to fetch a question from the LLM (LLama) backend\n  const fetchLlamaQuestion = async () => {\n    const response = await askLlama(\"Ask me a question about programming\");\n    setCurrentQuestion(response.data.question);\n    setQuestions([...questions, response.data.question]); // Add the question to the list\n  };\n\n  // Function to handle speech input\n  const handleStartListening = () => {\n    SpeechRecognition.startListening({\n      continuous: true\n    });\n  };\n  const handleStopListening = () => {\n    SpeechRecognition.stopListening();\n    setCurrentAnswer(transcript); // Set the current transcript as the answer\n    resetTranscript();\n  };\n\n  // Function to submit the interview responses to the backend\n  const handleSubmit = async () => {\n    const interview = {\n      interviewee_name: name,\n      responses: questions.map(q => ({\n        question: q,\n        answer: currentAnswer\n      }))\n    };\n    console.log(\"Submitting interview data:\", interview);\n    try {\n      await storeInterview(interview); // This will call the backend and store the interview\n      alert(\"Interview submitted!\");\n    } catch (error) {\n      console.error(\"Error submitting the interview:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interview Bot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter your name\",\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchLlamaQuestion,\n      children: \"Ask LLama\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Question:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), \" \", currentQuestion]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartListening,\n      children: \"Start Answering\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStopListening,\n      children: \"Stop Answering\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Your Answer:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), \" \", transcript]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit Interview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ghsfhgain/5onKEK9qORaTFbX0A=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SpeechRecognition","useSpeechRecognition","askLlama","storeInterview","jsxDEV","_jsxDEV","App","_s","name","setName","questions","setQuestions","currentQuestion","setCurrentQuestion","currentAnswer","setCurrentAnswer","transcript","resetTranscript","fetchLlamaQuestion","response","data","question","handleStartListening","startListening","continuous","handleStopListening","stopListening","handleSubmit","interview","interviewee_name","responses","map","q","answer","console","log","alert","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["F:/Kode/Projects/CGP_InterviewBot/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport { askLlama, storeInterview } from \"./api\"; // Import the API methods\nimport \"./App.css\"; // Import CSS for styling\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(\"\");\n  const [currentAnswer, setCurrentAnswer] = useState(\"\");\n  const { transcript, resetTranscript } = useSpeechRecognition();\n\n  // Function to fetch a question from the LLM (LLama) backend\n  const fetchLlamaQuestion = async () => {\n    const response = await askLlama(\"Ask me a question about programming\");\n    setCurrentQuestion(response.data.question);\n    setQuestions([...questions, response.data.question]); // Add the question to the list\n  };\n\n  // Function to handle speech input\n  const handleStartListening = () => {\n    SpeechRecognition.startListening({ continuous: true });\n  };\n\n  const handleStopListening = () => {\n    SpeechRecognition.stopListening();\n    setCurrentAnswer(transcript); // Set the current transcript as the answer\n    resetTranscript();\n  };\n\n  // Function to submit the interview responses to the backend\n  const handleSubmit = async () => {\n    const interview = {\n      interviewee_name: name,\n      responses: questions.map((q) => ({ question: q, answer: currentAnswer })),\n    };\n    console.log(\"Submitting interview data:\", interview);\n    try {\n      await storeInterview(interview); // This will call the backend and store the interview\n      alert(\"Interview submitted!\");\n    } catch (error) {\n      console.error(\"Error submitting the interview:\", error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Interview Bot</h1>\n\n      <input\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n\n      <button onClick={fetchLlamaQuestion}>Ask LLama</button>\n      <p>\n        <strong>Question:</strong> {currentQuestion}\n      </p>\n\n      <button onClick={handleStartListening}>Start Answering</button>\n      <button onClick={handleStopListening}>Stop Answering</button>\n\n      <p>\n        <strong>Your Answer:</strong> {transcript}\n      </p>\n\n      <button onClick={handleSubmit}>Submit Interview</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}