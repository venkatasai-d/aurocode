{"ast":null,"code":"var _jsxFileName = \"F:\\\\Kode\\\\Projects\\\\CGP_InterviewBot\\\\frontend\\\\src\\\\SpeechTest.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SpeechTest() {\n  _s();\n  const {\n    transcript,\n    listening,\n    resetTranscript\n  } = useSpeechRecognition();\n  const handleStartListening = () => {\n    SpeechRecognition.startListening({\n      continuous: true\n    });\n  };\n  const handleStopListening = () => {\n    SpeechRecognition.stopListening();\n  };\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Your browser doesn't support speech recognition.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Speech Recognition Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartListening,\n      children: \"Start Listening\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStopListening,\n      children: \"Stop Listening\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Listening: \", listening ? \"Yes\" : \"No\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Transcript: \", transcript]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetTranscript,\n      children: \"Reset Transcript\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(SpeechTest, \"17SLn9LOvMaFXaBpaxZ7VIdFVh4=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = SpeechTest;\nexport default SpeechTest;\nvar _c;\n$RefreshReg$(_c, \"SpeechTest\");","map":{"version":3,"names":["React","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","SpeechTest","_s","transcript","listening","resetTranscript","handleStartListening","startListening","continuous","handleStopListening","stopListening","browserSupportsSpeechRecognition","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["F:/Kode/Projects/CGP_InterviewBot/frontend/src/SpeechTest.jsx"],"sourcesContent":["import React from \"react\";\r\nimport SpeechRecognition, {\r\n  useSpeechRecognition,\r\n} from \"react-speech-recognition\";\r\n\r\nfunction SpeechTest() {\r\n  const { transcript, listening, resetTranscript } = useSpeechRecognition();\r\n\r\n  const handleStartListening = () => {\r\n    SpeechRecognition.startListening({ continuous: true });\r\n  };\r\n\r\n  const handleStopListening = () => {\r\n    SpeechRecognition.stopListening();\r\n  };\r\n\r\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\r\n    return <div>Your browser doesn't support speech recognition.</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Speech Recognition Test</h1>\r\n      <button onClick={handleStartListening}>Start Listening</button>\r\n      <button onClick={handleStopListening}>Stop Listening</button>\r\n\r\n      <p>Listening: {listening ? \"Yes\" : \"No\"}</p>\r\n      <p>Transcript: {transcript}</p>\r\n\r\n      <button onClick={resetTranscript}>Reset Transcript</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpeechTest;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,iBAAiB,IACtBC,oBAAoB,QACf,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM;IAAEC,UAAU;IAAEC,SAAS;IAAEC;EAAgB,CAAC,GAAGP,oBAAoB,CAAC,CAAC;EAEzE,MAAMQ,oBAAoB,GAAGA,CAAA,KAAM;IACjCT,iBAAiB,CAACU,cAAc,CAAC;MAAEC,UAAU,EAAE;IAAK,CAAC,CAAC;EACxD,CAAC;EAED,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAChCZ,iBAAiB,CAACa,aAAa,CAAC,CAAC;EACnC,CAAC;EAED,IAAI,CAACb,iBAAiB,CAACc,gCAAgC,CAAC,CAAC,EAAE;IACzD,oBAAOX,OAAA;MAAAY,QAAA,EAAK;IAAgD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACpE;EAEA,oBACEhB,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChChB,OAAA;MAAQiB,OAAO,EAAEX,oBAAqB;MAAAM,QAAA,EAAC;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/DhB,OAAA;MAAQiB,OAAO,EAAER,mBAAoB;MAAAG,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAE7DhB,OAAA;MAAAY,QAAA,GAAG,aAAW,EAACR,SAAS,GAAG,KAAK,GAAG,IAAI;IAAA;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5ChB,OAAA;MAAAY,QAAA,GAAG,cAAY,EAACT,UAAU;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAE/BhB,OAAA;MAAQiB,OAAO,EAAEZ,eAAgB;MAAAO,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxD,CAAC;AAEV;AAACd,EAAA,CA3BQD,UAAU;EAAA,QACkCH,oBAAoB;AAAA;AAAAoB,EAAA,GADhEjB,UAAU;AA6BnB,eAAeA,UAAU;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}