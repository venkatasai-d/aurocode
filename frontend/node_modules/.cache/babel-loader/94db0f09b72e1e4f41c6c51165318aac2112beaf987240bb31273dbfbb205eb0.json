{"ast":null,"code":"var _jsxFileName = \"F:\\\\Kode\\\\Projects\\\\CGP_InterviewBot\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { askOllama, storeInterview } from \"./api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [name, setName] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(\"\");\n  const [currentAnswer, setCurrentAnswer] = useState(\"\");\n  const [interviewId, setInterviewId] = useState(null); // Store MongoDB ID here\n  const [history, setHistory] = useState([]); // Store Q&A history\n\n  const handleSubmit = async () => {\n    const interview = {\n      interviewee_name: name,\n      responses: history // Push Q&A history\n    };\n    try {\n      const response = await storeInterview(interview);\n      alert(\"Interview submitted successfully!\");\n      setInterviewId(response.data.id); // Store the generated MongoDB ID\n    } catch (error) {\n      console.error(\"Error submitting the interview:\", error);\n    }\n  };\n  const fetchOllamaQuestion = async () => {\n    try {\n      const context = history.map(entry => ({\n        question: entry.question,\n        answer: entry.answer\n      }));\n      const response = await askOllama({\n        interview_id: interviewId,\n        // Send the MongoDB ID\n        context,\n        prompt: \"Generate the next question based on this context.\"\n      });\n      const newQuestion = response.data.question;\n      setCurrentQuestion(newQuestion);\n      setQuestions([...questions, newQuestion]);\n    } catch (error) {\n      console.error(\"Error fetching question from Ollama:\", error);\n    }\n  };\n  const saveAnswer = () => {\n    setHistory([...history, {\n      question: currentQuestion,\n      answer: currentAnswer\n    }]);\n    setCurrentQuestion(\"\"); // Clear the question for the next one\n    setCurrentAnswer(\"\"); // Clear the answer field\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interview Bot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter your name\",\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchOllamaQuestion,\n      children: \"Ask Ollama\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Question:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: currentQuestion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Type your answer here\",\n      value: currentAnswer,\n      onChange: e => setCurrentAnswer(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: saveAnswer,\n      children: \"Save Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit Interview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Interview History:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), history.map((entry, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Q:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), \" \", entry.question]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"A:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), \" \", entry.answer]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"dPCjIyvCnyxdaXIZTyfbkmVfm30=\");\n_c = App;\nexport default App;\n\n// import React, { useState } from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { askOllama, storeInterview } from \"./api\"; // Import the API methods\n// import \"./App.css\"; // Import CSS for styling\n\n// function App() {\n//   const [name, setName] = useState(\"\");\n//   const [questions, setQuestions] = useState([]);\n//   const [currentQuestion, setCurrentQuestion] = useState(\"\");\n//   const [currentAnswer, setCurrentAnswer] = useState(\"\");\n//   const { transcript, resetTranscript, listening } = useSpeechRecognition(); // Include listening state\n//   const [llamaResponse, setLlamaResponse] = useState(\"\");\n\n//   let listenFlag = false;\n\n//   // Function to fetch a question from the LLM (LLama) backend\n//   const fetchOllamaQuestion = async () => {\n//     try {\n//       const response = await askOllama(\n//         \"Ask me a short interview question in Java\"\n//       );\n//       setCurrentQuestion(response.data.question);\n//       setQuestions([...questions, response.data.question]);\n//       setLlamaResponse(response.data.question); // Update to Ollama response\n//     } catch (error) {\n//       console.error(\"Error fetching question from Ollama:\", error);\n//       setLlamaResponse(\"Error: Unable to fetch question from Ollama\");\n//     }\n//   };\n\n//   const toggleListening = () => {\n//     if (listening) {\n//       SpeechRecognition.stopListening();\n//       setCurrentAnswer(transcript); // Set the current transcript as the answer\n//       resetTranscript(); // Reset the transcript after stopping\n//     } else {\n//       SpeechRecognition.startListening({ continuous: true });\n//     }\n//   };\n\n//   // Function to submit the interview responses to the backend\n//   const handleSubmit = async () => {\n//     const interview = {\n//       interviewee_name: name,\n//       responses: questions.map((q) => ({ question: q, answer: currentAnswer })),\n//     };\n//     console.log(\"Submitting interview data:\", interview);\n//     try {\n//       await storeInterview(interview); // This will call the backend and store the interview\n//       alert(\"Interview submitted!\");\n//     } catch (error) {\n//       console.error(\"Error submitting the interview:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Interview Bot</h1>\n\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter your name\"\n//         value={name}\n//         onChange={(e) => setName(e.target.value)}\n//       />\n\n//       <button onClick={fetchOllamaQuestion}>Ask Ollama</button>\n//       <br></br>\n\n//       {llamaResponse && (\n//         <div>\n//           <h3>LLama Response:</h3>\n//           <p>{llamaResponse}</p> {/* Display the response here */}\n//         </div>\n//       )}\n\n//       {/* Toggle listening button */}\n//       <button onClick={toggleListening}>\n//         {listening ? \"Stop Listening\" : \"Start Answering\"}\n//       </button>\n\n//       <p>\n//         <strong>Your Answer:</strong> {transcript}\n//       </p>\n\n//       <button className=\"submit-btn\" onClick={handleSubmit}>\n//         Submit Interview\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// import React, { useState, useRef } from \"react\";\n// import { askOllama, storeInterview } from \"./api\"; // Import the API methods\n// import \"./App.css\"; // Import CSS for styling\n\n// function App() {\n//   const [name, setName] = useState(\"\");\n//   const [questions, setQuestions] = useState([]);\n//   const [currentQuestion, setCurrentQuestion] = useState(\"\");\n//   const [transcript, setTranscript] = useState(\"\"); // To store the transcript in real-time\n//   const [llamaResponse, setLlamaResponse] = useState(\"\");\n//   const [recording, setRecording] = useState(false); // Track recording state\n//   const mediaRecorderRef = useRef(null);\n//   const audioChunksRef = useRef([]);\n//   const socketRef = useRef(null); // Ref for WebSocket connection\n\n//   // Function to fetch a question from the LLM (Ollama) backend\n//   const fetchOllamaQuestion = async () => {\n//     try {\n//       const response = await askOllama(\"Ask me a question about programming\");\n//       setCurrentQuestion(response.data.question);\n//       setQuestions([...questions, response.data.question]);\n//       setLlamaResponse(response.data.question);\n//     } catch (error) {\n//       console.error(\"Error fetching question from Ollama:\", error);\n//       setLlamaResponse(\"Error: Unable to fetch question from Ollama\");\n//     }\n//   };\n\n//   // Function to handle recording start/stop\n//   const toggleRecording = () => {\n//     if (recording) {\n//       stopRecording();\n//     } else {\n//       startRecording();\n//     }\n//   };\n\n//   const startRecording = () => {\n//     if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n//       navigator.mediaDevices\n//         .getUserMedia({ audio: true })\n//         .then((stream) => {\n//           const mediaRecorder = new MediaRecorder(stream);\n//           mediaRecorderRef.current = mediaRecorder;\n//           audioChunksRef.current = [];\n\n//           // Set up WebSocket connection to backend\n//           socketRef.current = new WebSocket(\"ws://localhost:8000/ws/live-stt\");\n\n//           socketRef.current.onopen = () => {\n//             console.log(\"WebSocket connection opened\");\n//           };\n\n//           socketRef.current.onmessage = (event) => {\n//             const data = JSON.parse(event.data);\n//             if (data.partial) {\n//               setTranscript(data.partial); // Update the transcript in real-time\n//             } else if (data.text) {\n//               setTranscript(data.text); // Set final transcript when complete\n//             }\n//           };\n\n//           mediaRecorder.ondataavailable = (event) => {\n//             audioChunksRef.current.push(event.data);\n//             if (socketRef.current.readyState === WebSocket.OPEN) {\n//               socketRef.current.send(event.data); // Send audio chunks to WebSocket\n//             }\n//           };\n\n//           mediaRecorder.start(200); // Send audio chunks every 200ms\n//           setRecording(true);\n//         })\n//         .catch((error) => {\n//           console.error(\"Error accessing microphone:\", error);\n//         });\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     const mediaRecorder = mediaRecorderRef.current;\n//     if (mediaRecorder) {\n//       mediaRecorder.stop();\n//       mediaRecorder.onstop = () => {\n//         if (socketRef.current) {\n//           socketRef.current.close(); // Close WebSocket connection\n//         }\n//         setRecording(false);\n//       };\n//     }\n//   };\n\n//   // Function to submit the interview responses to the backend\n//   const handleSubmit = async () => {\n//     const interview = {\n//       interviewee_name: name,\n//       responses: questions.map((q) => ({ question: q, answer: transcript })),\n//     };\n//     console.log(\"Submitting interview data:\", interview);\n//     try {\n//       await storeInterview(interview); // This will call the backend and store the interview\n//       alert(\"Interview submitted!\");\n//     } catch (error) {\n//       console.error(\"Error submitting the interview:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Interview Bot</h1>\n\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter your name\"\n//         value={name}\n//         onChange={(e) => setName(e.target.value)}\n//       />\n\n//       <button onClick={fetchOllamaQuestion}>Ask Ollama</button>\n\n//       {llamaResponse && (\n//         <div>\n//           <h3>Ollama Response:</h3>\n//           <p>{llamaResponse}</p>\n//         </div>\n//       )}\n\n//       {/* <p>\n//         <strong>Question:</strong> {currentQuestion}\n//       </p> */}\n//       <br></br>\n//       {/* Toggle recording button */}\n//       <button onClick={toggleRecording}>\n//         {recording ? \"Stop Recording\" : \"Start Answering\"}\n//       </button>\n\n//       <p>\n//         <strong>Your Answer (Real-Time Transcript):</strong> {transcript}\n//       </p>\n\n//       <button onClick={handleSubmit}>Submit Interview</button>\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","askOllama","storeInterview","jsxDEV","_jsxDEV","App","_s","name","setName","questions","setQuestions","currentQuestion","setCurrentQuestion","currentAnswer","setCurrentAnswer","interviewId","setInterviewId","history","setHistory","handleSubmit","interview","interviewee_name","responses","response","alert","data","id","error","console","fetchOllamaQuestion","context","map","entry","question","answer","interview_id","prompt","newQuestion","saveAnswer","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","index","_c","$RefreshReg$"],"sources":["F:/Kode/Projects/CGP_InterviewBot/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { askOllama, storeInterview } from \"./api\";\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(\"\");\n  const [currentAnswer, setCurrentAnswer] = useState(\"\");\n  const [interviewId, setInterviewId] = useState(null); // Store MongoDB ID here\n  const [history, setHistory] = useState([]); // Store Q&A history\n\n  const handleSubmit = async () => {\n    const interview = {\n      interviewee_name: name,\n      responses: history, // Push Q&A history\n    };\n\n    try {\n      const response = await storeInterview(interview);\n      alert(\"Interview submitted successfully!\");\n      setInterviewId(response.data.id); // Store the generated MongoDB ID\n    } catch (error) {\n      console.error(\"Error submitting the interview:\", error);\n    }\n  };\n\n  const fetchOllamaQuestion = async () => {\n    try {\n      const context = history.map((entry) => ({\n        question: entry.question,\n        answer: entry.answer,\n      }));\n\n      const response = await askOllama({\n        interview_id: interviewId, // Send the MongoDB ID\n        context,\n        prompt: \"Generate the next question based on this context.\",\n      });\n\n      const newQuestion = response.data.question;\n      setCurrentQuestion(newQuestion);\n      setQuestions([...questions, newQuestion]);\n    } catch (error) {\n      console.error(\"Error fetching question from Ollama:\", error);\n    }\n  };\n\n  const saveAnswer = () => {\n    setHistory([\n      ...history,\n      { question: currentQuestion, answer: currentAnswer },\n    ]);\n    setCurrentQuestion(\"\"); // Clear the question for the next one\n    setCurrentAnswer(\"\"); // Clear the answer field\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Interview Bot</h1>\n\n      <input\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n\n      <button onClick={fetchOllamaQuestion}>Ask Ollama</button>\n\n      <div>\n        <h3>Question:</h3>\n        <p>{currentQuestion}</p>\n      </div>\n\n      <textarea\n        placeholder=\"Type your answer here\"\n        value={currentAnswer}\n        onChange={(e) => setCurrentAnswer(e.target.value)}\n      />\n\n      <button onClick={saveAnswer}>Save Answer</button>\n\n      <button onClick={handleSubmit}>Submit Interview</button>\n\n      <div>\n        <h3>Interview History:</h3>\n        {history.map((entry, index) => (\n          <div key={index}>\n            <p>\n              <strong>Q:</strong> {entry.question}\n            </p>\n            <p>\n              <strong>A:</strong> {entry.answer}\n            </p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n// import React, { useState } from \"react\";\n// import SpeechRecognition, {\n//   useSpeechRecognition,\n// } from \"react-speech-recognition\";\n// import { askOllama, storeInterview } from \"./api\"; // Import the API methods\n// import \"./App.css\"; // Import CSS for styling\n\n// function App() {\n//   const [name, setName] = useState(\"\");\n//   const [questions, setQuestions] = useState([]);\n//   const [currentQuestion, setCurrentQuestion] = useState(\"\");\n//   const [currentAnswer, setCurrentAnswer] = useState(\"\");\n//   const { transcript, resetTranscript, listening } = useSpeechRecognition(); // Include listening state\n//   const [llamaResponse, setLlamaResponse] = useState(\"\");\n\n//   let listenFlag = false;\n\n//   // Function to fetch a question from the LLM (LLama) backend\n//   const fetchOllamaQuestion = async () => {\n//     try {\n//       const response = await askOllama(\n//         \"Ask me a short interview question in Java\"\n//       );\n//       setCurrentQuestion(response.data.question);\n//       setQuestions([...questions, response.data.question]);\n//       setLlamaResponse(response.data.question); // Update to Ollama response\n//     } catch (error) {\n//       console.error(\"Error fetching question from Ollama:\", error);\n//       setLlamaResponse(\"Error: Unable to fetch question from Ollama\");\n//     }\n//   };\n\n//   const toggleListening = () => {\n//     if (listening) {\n//       SpeechRecognition.stopListening();\n//       setCurrentAnswer(transcript); // Set the current transcript as the answer\n//       resetTranscript(); // Reset the transcript after stopping\n//     } else {\n//       SpeechRecognition.startListening({ continuous: true });\n//     }\n//   };\n\n//   // Function to submit the interview responses to the backend\n//   const handleSubmit = async () => {\n//     const interview = {\n//       interviewee_name: name,\n//       responses: questions.map((q) => ({ question: q, answer: currentAnswer })),\n//     };\n//     console.log(\"Submitting interview data:\", interview);\n//     try {\n//       await storeInterview(interview); // This will call the backend and store the interview\n//       alert(\"Interview submitted!\");\n//     } catch (error) {\n//       console.error(\"Error submitting the interview:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Interview Bot</h1>\n\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter your name\"\n//         value={name}\n//         onChange={(e) => setName(e.target.value)}\n//       />\n\n//       <button onClick={fetchOllamaQuestion}>Ask Ollama</button>\n//       <br></br>\n\n//       {llamaResponse && (\n//         <div>\n//           <h3>LLama Response:</h3>\n//           <p>{llamaResponse}</p> {/* Display the response here */}\n//         </div>\n//       )}\n\n//       {/* Toggle listening button */}\n//       <button onClick={toggleListening}>\n//         {listening ? \"Stop Listening\" : \"Start Answering\"}\n//       </button>\n\n//       <p>\n//         <strong>Your Answer:</strong> {transcript}\n//       </p>\n\n//       <button className=\"submit-btn\" onClick={handleSubmit}>\n//         Submit Interview\n//       </button>\n//     </div>\n//   );\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// import React, { useState, useRef } from \"react\";\n// import { askOllama, storeInterview } from \"./api\"; // Import the API methods\n// import \"./App.css\"; // Import CSS for styling\n\n// function App() {\n//   const [name, setName] = useState(\"\");\n//   const [questions, setQuestions] = useState([]);\n//   const [currentQuestion, setCurrentQuestion] = useState(\"\");\n//   const [transcript, setTranscript] = useState(\"\"); // To store the transcript in real-time\n//   const [llamaResponse, setLlamaResponse] = useState(\"\");\n//   const [recording, setRecording] = useState(false); // Track recording state\n//   const mediaRecorderRef = useRef(null);\n//   const audioChunksRef = useRef([]);\n//   const socketRef = useRef(null); // Ref for WebSocket connection\n\n//   // Function to fetch a question from the LLM (Ollama) backend\n//   const fetchOllamaQuestion = async () => {\n//     try {\n//       const response = await askOllama(\"Ask me a question about programming\");\n//       setCurrentQuestion(response.data.question);\n//       setQuestions([...questions, response.data.question]);\n//       setLlamaResponse(response.data.question);\n//     } catch (error) {\n//       console.error(\"Error fetching question from Ollama:\", error);\n//       setLlamaResponse(\"Error: Unable to fetch question from Ollama\");\n//     }\n//   };\n\n//   // Function to handle recording start/stop\n//   const toggleRecording = () => {\n//     if (recording) {\n//       stopRecording();\n//     } else {\n//       startRecording();\n//     }\n//   };\n\n//   const startRecording = () => {\n//     if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n//       navigator.mediaDevices\n//         .getUserMedia({ audio: true })\n//         .then((stream) => {\n//           const mediaRecorder = new MediaRecorder(stream);\n//           mediaRecorderRef.current = mediaRecorder;\n//           audioChunksRef.current = [];\n\n//           // Set up WebSocket connection to backend\n//           socketRef.current = new WebSocket(\"ws://localhost:8000/ws/live-stt\");\n\n//           socketRef.current.onopen = () => {\n//             console.log(\"WebSocket connection opened\");\n//           };\n\n//           socketRef.current.onmessage = (event) => {\n//             const data = JSON.parse(event.data);\n//             if (data.partial) {\n//               setTranscript(data.partial); // Update the transcript in real-time\n//             } else if (data.text) {\n//               setTranscript(data.text); // Set final transcript when complete\n//             }\n//           };\n\n//           mediaRecorder.ondataavailable = (event) => {\n//             audioChunksRef.current.push(event.data);\n//             if (socketRef.current.readyState === WebSocket.OPEN) {\n//               socketRef.current.send(event.data); // Send audio chunks to WebSocket\n//             }\n//           };\n\n//           mediaRecorder.start(200); // Send audio chunks every 200ms\n//           setRecording(true);\n//         })\n//         .catch((error) => {\n//           console.error(\"Error accessing microphone:\", error);\n//         });\n//     }\n//   };\n\n//   const stopRecording = () => {\n//     const mediaRecorder = mediaRecorderRef.current;\n//     if (mediaRecorder) {\n//       mediaRecorder.stop();\n//       mediaRecorder.onstop = () => {\n//         if (socketRef.current) {\n//           socketRef.current.close(); // Close WebSocket connection\n//         }\n//         setRecording(false);\n//       };\n//     }\n//   };\n\n//   // Function to submit the interview responses to the backend\n//   const handleSubmit = async () => {\n//     const interview = {\n//       interviewee_name: name,\n//       responses: questions.map((q) => ({ question: q, answer: transcript })),\n//     };\n//     console.log(\"Submitting interview data:\", interview);\n//     try {\n//       await storeInterview(interview); // This will call the backend and store the interview\n//       alert(\"Interview submitted!\");\n//     } catch (error) {\n//       console.error(\"Error submitting the interview:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <h1>Interview Bot</h1>\n\n//       <input\n//         type=\"text\"\n//         placeholder=\"Enter your name\"\n//         value={name}\n//         onChange={(e) => setName(e.target.value)}\n//       />\n\n//       <button onClick={fetchOllamaQuestion}>Ask Ollama</button>\n\n//       {llamaResponse && (\n//         <div>\n//           <h3>Ollama Response:</h3>\n//           <p>{llamaResponse}</p>\n//         </div>\n//       )}\n\n//       {/* <p>\n//         <strong>Question:</strong> {currentQuestion}\n//       </p> */}\n//       <br></br>\n//       {/* Toggle recording button */}\n//       <button onClick={toggleRecording}>\n//         {recording ? \"Stop Recording\" : \"Start Answering\"}\n//       </button>\n\n//       <p>\n//         <strong>Your Answer (Real-Time Transcript):</strong> {transcript}\n//       </p>\n\n//       <button onClick={handleSubmit}>Submit Interview</button>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,EAAEC,cAAc,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE5C,MAAMmB,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,SAAS,GAAG;MAChBC,gBAAgB,EAAEd,IAAI;MACtBe,SAAS,EAAEL,OAAO,CAAE;IACtB,CAAC;IAED,IAAI;MACF,MAAMM,QAAQ,GAAG,MAAMrB,cAAc,CAACkB,SAAS,CAAC;MAChDI,KAAK,CAAC,mCAAmC,CAAC;MAC1CR,cAAc,CAACO,QAAQ,CAACE,IAAI,CAACC,EAAE,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF,CAAC;EAED,MAAME,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAI;MACF,MAAMC,OAAO,GAAGb,OAAO,CAACc,GAAG,CAAEC,KAAK,KAAM;QACtCC,QAAQ,EAAED,KAAK,CAACC,QAAQ;QACxBC,MAAM,EAAEF,KAAK,CAACE;MAChB,CAAC,CAAC,CAAC;MAEH,MAAMX,QAAQ,GAAG,MAAMtB,SAAS,CAAC;QAC/BkC,YAAY,EAAEpB,WAAW;QAAE;QAC3Be,OAAO;QACPM,MAAM,EAAE;MACV,CAAC,CAAC;MAEF,MAAMC,WAAW,GAAGd,QAAQ,CAACE,IAAI,CAACQ,QAAQ;MAC1CrB,kBAAkB,CAACyB,WAAW,CAAC;MAC/B3B,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAE4B,WAAW,CAAC,CAAC;IAC3C,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D;EACF,CAAC;EAED,MAAMW,UAAU,GAAGA,CAAA,KAAM;IACvBpB,UAAU,CAAC,CACT,GAAGD,OAAO,EACV;MAAEgB,QAAQ,EAAEtB,eAAe;MAAEuB,MAAM,EAAErB;IAAc,CAAC,CACrD,CAAC;IACFD,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;IACxBE,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;EACxB,CAAC;EAED,oBACEV,OAAA;IAAKmC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBpC,OAAA;MAAAoC,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEtBxC,OAAA;MACEyC,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,iBAAiB;MAC7BC,KAAK,EAAExC,IAAK;MACZyC,QAAQ,EAAGC,CAAC,IAAKzC,OAAO,CAACyC,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C,CAAC,eAEFxC,OAAA;MAAQ+C,OAAO,EAAEtB,mBAAoB;MAAAW,QAAA,EAAC;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAEzDxC,OAAA;MAAAoC,QAAA,gBACEpC,OAAA;QAAAoC,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClBxC,OAAA;QAAAoC,QAAA,EAAI7B;MAAe;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,eAENxC,OAAA;MACE0C,WAAW,EAAC,uBAAuB;MACnCC,KAAK,EAAElC,aAAc;MACrBmC,QAAQ,EAAGC,CAAC,IAAKnC,gBAAgB,CAACmC,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC,eAEFxC,OAAA;MAAQ+C,OAAO,EAAEb,UAAW;MAAAE,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAEjDxC,OAAA;MAAQ+C,OAAO,EAAEhC,YAAa;MAAAqB,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAExDxC,OAAA;MAAAoC,QAAA,gBACEpC,OAAA;QAAAoC,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EAC1B3B,OAAO,CAACc,GAAG,CAAC,CAACC,KAAK,EAAEoB,KAAK,kBACxBhD,OAAA;QAAAoC,QAAA,gBACEpC,OAAA;UAAAoC,QAAA,gBACEpC,OAAA;YAAAoC,QAAA,EAAQ;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACZ,KAAK,CAACC,QAAQ;QAAA;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC,CAAC,eACJxC,OAAA;UAAAoC,QAAA,gBACEpC,OAAA;YAAAoC,QAAA,EAAQ;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,KAAC,EAACZ,KAAK,CAACE,MAAM;QAAA;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChC,CAAC;MAAA,GANIQ,KAAK;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOV,CACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACtC,EAAA,CAhGQD,GAAG;AAAAgD,EAAA,GAAHhD,GAAG;AAkGZ,eAAeA,GAAG;;AAElgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}