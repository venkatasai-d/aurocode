{"ast":null,"code":"var _jsxFileName = \"F:\\\\Kode\\\\Projects\\\\CGP_InterviewBot\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport SpeechRecognition, { useSpeechRecognition } from \"react-speech-recognition\";\nimport { askLlama, storeInterview } from \"./api\"; // Import the API methods\nimport \"./App.css\"; // Import CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [name, setName] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(\"\");\n  const [currentAnswer, setCurrentAnswer] = useState(\"\");\n  const {\n    transcript,\n    resetTranscript,\n    listening\n  } = useSpeechRecognition(); // Include listening state\n  const [llamaResponse, setLlamaResponse] = useState(\"\");\n\n  // Function to fetch a question from the LLM (LLama) backend\n  const fetchOllamaQuestion = async () => {\n    try {\n      const response = await askOllama(\"Ask me a question about programming\");\n      setCurrentQuestion(response.data.question);\n      setQuestions([...questions, response.data.question]);\n      setLlamaResponse(response.data.question); // Update to Ollama response\n    } catch (error) {\n      console.error(\"Error fetching question from Ollama:\", error);\n      setLlamaResponse(\"Error: Unable to fetch question from Ollama\");\n    }\n  };\n\n  // Function to handle speech input\n  const handleStartListening = () => {\n    console.log(\"Starting to listen...\"); // Debugging line\n    SpeechRecognition.startListening({\n      continuous: true\n    });\n  };\n  const handleStopListening = () => {\n    console.log(\"Stopping listening...\"); // Debugging line\n    SpeechRecognition.stopListening();\n    console.log(\"Transcript:\", transcript); // Debugging: Show the transcript\n    setCurrentAnswer(transcript); // Set the current transcript as the answer\n    resetTranscript();\n  };\n\n  // Function to submit the interview responses to the backend\n  const handleSubmit = async () => {\n    const interview = {\n      interviewee_name: name,\n      responses: questions.map(q => ({\n        question: q,\n        answer: currentAnswer\n      }))\n    };\n    console.log(\"Submitting interview data:\", interview);\n    try {\n      await storeInterview(interview); // This will call the backend and store the interview\n      alert(\"Interview submitted!\");\n    } catch (error) {\n      console.error(\"Error submitting the interview:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interview Bot\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter your name\",\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchLlamaQuestion,\n      children: \"Ask LLama\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), llamaResponse && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"LLama Response:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: llamaResponse\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Question:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), \" \", currentQuestion]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStartListening,\n      children: \"Start Answering\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleStopListening,\n      children: \"Stop Answering\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Your Answer:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), \" \", transcript, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Listening:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), \" \", listening ? \"Yes\" : \"No\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit Interview\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nRhhN4tLdNJolVD3XHKpE8/eIh0=\", false, function () {\n  return [useSpeechRecognition];\n});\n_c = App;\nexport default App;\n// import SpeechTest from \"./SpeechTest\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <SpeechTest />\n//     </div>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","SpeechRecognition","useSpeechRecognition","askLlama","storeInterview","jsxDEV","_jsxDEV","App","_s","name","setName","questions","setQuestions","currentQuestion","setCurrentQuestion","currentAnswer","setCurrentAnswer","transcript","resetTranscript","listening","llamaResponse","setLlamaResponse","fetchOllamaQuestion","response","askOllama","data","question","error","console","handleStartListening","log","startListening","continuous","handleStopListening","stopListening","handleSubmit","interview","interviewee_name","responses","map","q","answer","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","fetchLlamaQuestion","_c","$RefreshReg$"],"sources":["F:/Kode/Projects/CGP_InterviewBot/frontend/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport { askLlama, storeInterview } from \"./api\"; // Import the API methods\nimport \"./App.css\"; // Import CSS for styling\n\nfunction App() {\n  const [name, setName] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(\"\");\n  const [currentAnswer, setCurrentAnswer] = useState(\"\");\n  const { transcript, resetTranscript, listening } = useSpeechRecognition(); // Include listening state\n  const [llamaResponse, setLlamaResponse] = useState(\"\");\n\n  // Function to fetch a question from the LLM (LLama) backend\n  const fetchOllamaQuestion = async () => {\n    try {\n      const response = await askOllama(\"Ask me a question about programming\");\n      setCurrentQuestion(response.data.question);\n      setQuestions([...questions, response.data.question]);\n      setLlamaResponse(response.data.question); // Update to Ollama response\n    } catch (error) {\n      console.error(\"Error fetching question from Ollama:\", error);\n      setLlamaResponse(\"Error: Unable to fetch question from Ollama\");\n    }\n  };\n\n  // Function to handle speech input\n  const handleStartListening = () => {\n    console.log(\"Starting to listen...\"); // Debugging line\n    SpeechRecognition.startListening({ continuous: true });\n  };\n\n  const handleStopListening = () => {\n    console.log(\"Stopping listening...\"); // Debugging line\n    SpeechRecognition.stopListening();\n    console.log(\"Transcript:\", transcript); // Debugging: Show the transcript\n    setCurrentAnswer(transcript); // Set the current transcript as the answer\n    resetTranscript();\n  };\n\n  // Function to submit the interview responses to the backend\n  const handleSubmit = async () => {\n    const interview = {\n      interviewee_name: name,\n      responses: questions.map((q) => ({ question: q, answer: currentAnswer })),\n    };\n    console.log(\"Submitting interview data:\", interview);\n    try {\n      await storeInterview(interview); // This will call the backend and store the interview\n      alert(\"Interview submitted!\");\n    } catch (error) {\n      console.error(\"Error submitting the interview:\", error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Interview Bot</h1>\n\n      <input\n        type=\"text\"\n        placeholder=\"Enter your name\"\n        value={name}\n        onChange={(e) => setName(e.target.value)}\n      />\n\n      <button onClick={fetchLlamaQuestion}>Ask LLama</button>\n\n      {llamaResponse && (\n        <div>\n          <h3>LLama Response:</h3>\n          <p>{llamaResponse}</p>\n        </div>\n      )}\n\n      <p>\n        <strong>Question:</strong> {currentQuestion}\n      </p>\n\n      <button onClick={handleStartListening}>Start Answering</button>\n      <button onClick={handleStopListening}>Stop Answering</button>\n\n      <p>\n        <strong>Your Answer:</strong> {transcript}{\" \"}\n        {/* Show real-time transcript */}\n      </p>\n\n      <p>\n        <strong>Listening:</strong> {listening ? \"Yes\" : \"No\"}{\" \"}\n        {/* Display listening state */}\n      </p>\n\n      <button onClick={handleSubmit}>Submit Interview</button>\n    </div>\n  );\n}\n\nexport default App;\n// import SpeechTest from \"./SpeechTest\";\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <SpeechTest />\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}